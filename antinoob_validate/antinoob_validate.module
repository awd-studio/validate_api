<?php

/**
 * @file
 */

/**
 * Implements hook_validator_info().
 * Antinoob validation.
 */
function antinoob_validate_validator_info() {
  $items = array();
  $items[] = array(
    'type' => 'text',
    'title' => t('Exclamation'),
    'description' => t('Disallow to use multiple exclamation symbols in a row.'),
    'name' => 'exclamation_point',
    'callback' => 'antinoob_exclamation_symbol_callback',
  );

  $items[] = array(
    'type' => 'text',
    'title' => t('Caps Lock'),
    'description' => t('Disallow to use all capital words.'),
    'name' => 'caps_lock',
    'callback' => 'antinoob_caps_lock_callback',
  );

  $restricted_words = explode("\n", file_get_contents(drupal_get_path('module', 'antinoob_validate') . '/forbitten.words'));
  $words = array();
  foreach($restricted_words as $word) {
    $word = trim($word);
    if(!empty($word)) {
      $words[] = '"' . $word . '"';
    }
  }
  

  $items[] = array(
    'type' => 'text',
    'title' => t('Disallowed words'),
    'description' => t('Disallow to use word(s): !words.', array('!words' => implode(', ', $words))),
    'name' => 'disallowed_words',
    'callback' => 'antinoob_disallowed_words_callback',
  );
  return $items;
}

/**
 *
 */
function antinoob_disallowed_words_callback($field, $field_name, $entity, &$message) {
  $values = array();
  $valid = array();
  if ($field_name == 'title') {
    $values[] = str_replace(array(',', '!', '?'), ' ', $field);
    $label = t('Title');
  }
  else {
    $info = field_info_instance('node', $field_name, $entity->type);
    $label = $info['label'];
    if (!empty($field['und'])) {
      foreach ($field['und'] as $field_value) {
        $values[] = str_replace(array(',', '!', '?'), ' ', $field_value['value']);
      }
    }
  }

  $status = FALSE;

  $restricted_words = explode("\n", file_get_contents(drupal_get_path('module', 'antinoob_validate') . '/forbitten.words'));

  foreach ($values as $value) {
    foreach ($restricted_words as $word) {
      if(!empty($word)) {
        $word = trim($word);
        if(mb_stripos($value, $word) !== FALSE) {
          $words[] = $word;
          $status = TRUE;
          $message = t('[@word] is forbidden to use.', array('@word' => implode(', ', $words)));
        }
      }
    }
  }

  return $status;
}

/**
 *
 */
function antinoob_exclamation_symbol_callback($field, $field_name, $entity, &$message) {
  $values = array();
  $valid = array();
  if ($field_name == 'title') {
    $values[] = $field;
    $label = t('Title');
  }
  else {
    $info = field_info_instance('node', $field_name, $entity->type);
    $label = $info['label'];
    if (!empty($field['und'])) {
      foreach ($field['und'] as $field_value) {
        $values[] = $field_value['value'];
      }
    }
  }

  $status = FALSE;

  foreach ($values as $value) {
    if (preg_match('/!!/', $value)) {
      $status = TRUE;
      $message = t('[@value] Do not use more than one exclamation point in a row.', array('@value' => $value));
    }
  }

  return $status;
}

/**
 *
 */
function antinoob_caps_lock_callback($field, $field_name, $entity, &$message) {
  $values = array();
  $valid = array();
  if ($field_name == 'title') {
    $values[] = $field;
    $label = t('Title');
  }
  else {
    $info = field_info_instance('node', $field_name, $entity->type);
    $label = $info['label'];
    if (!empty($field['und'])) {
      foreach ($field['und'] as $field_value) {
        $values[] = $field_value['value'];
      }
    }
  }

  $status = FALSE;

  foreach ($values as $value) {
    $words = explode(' ', $value);
    foreach ($words as $word) {
      if (empty($word)) {
        continue;
      }
      $upper = mb_strtoupper($word);
      if ($word == $upper) {
        $status = TRUE;
        $message = t('[@word] Using ALL capital symbols is forbidden. ', array('@word' => $word));
      }
    }
  }
  return $status;
}
